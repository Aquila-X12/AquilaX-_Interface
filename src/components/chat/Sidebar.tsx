
import { useState, useEffect } from 'react';
import { Menu, Search, Plus, Sparkles, Settings, HelpCircle, MoreHorizontal, Activity, BookOpen, Target, GraduationCap, Brain, Users, TrendingUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useChatStorage, ChatSession } from '@/hooks/useChatStorage';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface SidebarProps {
  isCollapsed: boolean;
  onToggleCollapse: () => void;
  onNewChat: () => void;
  onChatSelect: (chatId: string) => void;
  activeChatId: string;
}

export const Sidebar = ({ 
  isCollapsed, 
  onToggleCollapse, 
  onNewChat, 
  onChatSelect, 
  activeChatId 
}: SidebarProps) => {
  const [searchQuery, setSearchQuery] = useState('');
  const { getAllSessions, updateChatSession, deleteChatSession } = useChatStorage();
  const [chatHistory, setChatHistory] = useState<ChatSession[]>([]);

  // Load chat sessions
  useEffect(() => {
    const sessions = getAllSessions();
    setChatHistory(sessions);
    console.log('📚 Loaded chat sessions:', sessions.length);
  }, [getAllSessions]);

  // Refresh sessions when active chat changes
  useEffect(() => {
    const sessions = getAllSessions();
    setChatHistory(sessions);
  }, [activeChatId, getAllSessions]);

  const formatTimestamp = (timestamp: Date): string => {
    try {
      const now = new Date();
      const diffInHours = (now.getTime() - timestamp.getTime()) / (1000 * 3600);
      
      if (diffInHours < 1) return 'Just now';
      if (diffInHours < 24) return `${Math.floor(diffInHours)}h ago`;
      if (diffInHours < 48) return 'Yesterday';
      return timestamp.toLocaleDateString();
    } catch {
      return 'Unknown';
    }
  };

  const extractConversationToFile = (session: ChatSession) => {
    const conversationData = {
      title: session.title,
      chatId: session.id,
      exportDate: new Date().toISOString(),
      createdAt: session.createdAt.toISOString(),
      updatedAt: session.updatedAt.toISOString(),
      messageCount: session.messages.length,
      wordCount: session.wordCount || 0,
      aiModel: session.aiModel || 'Aquilax Pro',
      messages: session.messages.map(msg => ({
        sender: msg.sender,
        content: msg.content,
        timestamp: msg.timestamp.toISOString(),
        messageType: msg.messageType,
        metadata: msg.metadata
      }))
    };

    const formattedContent = `AQUILAX AI CONVERSATION EXPORT
====================================

Chat Title: ${conversationData.title}
Chat ID: ${conversationData.chatId}
AI Model: ${conversationData.aiModel}
Created: ${new Date(conversationData.createdAt).toLocaleString()}
Last Updated: ${new Date(conversationData.updatedAt).toLocaleString()}
Export Date: ${new Date(conversationData.exportDate).toLocaleString()}
Total Messages: ${conversationData.messageCount}
Word Count: ${conversationData.wordCount}

====================================
CONVERSATION TRANSCRIPT
====================================

${conversationData.messages.map((msg, index) => {
  const timestamp = new Date(msg.timestamp).toLocaleString();
  const sender = msg.sender === 'user' ? 'USER' : 'AQUILAX AI';
  const metadata = msg.metadata ? `\n[Metadata: Tokens: ${msg.metadata.tokens || 'N/A'}, Confidence: ${msg.metadata.confidence || 'N/A'}, Processing Time: ${msg.metadata.processingTime || 'N/A'}ms]` : '';
  return `[${timestamp}] ${sender}:
${msg.content}${metadata}

`;
}).join('')}

====================================
STATISTICS
====================================
- Total Messages: ${conversationData.messageCount}
- User Messages: ${conversationData.messages.filter(m => m.sender === 'user').length}
- AI Responses: ${conversationData.messages.filter(m => m.sender === 'ai').length}
- Total Words: ${conversationData.wordCount}
- Average Response Time: ${conversationData.messages
  .filter(m => m.metadata?.processingTime)
  .reduce((sum, m) => sum + (m.metadata?.processingTime || 0), 0) / 
  Math.max(1, conversationData.messages.filter(m => m.metadata?.processingTime).length)}ms

====================================
Export generated by Aquilax AI Assistant
Advanced Educational AI for Universities and Learning Institutions
Developed with React, TypeScript, and Tailwind CSS
====================================`;

    const blob = new Blob([formattedContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `aquilax-conversation-${session.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    console.log(`✅ Conversation "${session.title}" extracted successfully!`);
  };

  const filteredChats = chatHistory.filter(chat =>
    chat.title.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const sortedChats = [...filteredChats].sort((a, b) => {
    if (a.isPinned && !b.isPinned) return -1;
    if (!a.isPinned && b.isPinned) return 1;
    return b.updatedAt.getTime() - a.updatedAt.getTime();
  });

  const handleChatAction = (action: string, session: ChatSession) => {
    switch (action) {
      case 'pin':
        updateChatSession(session.id, { isPinned: !session.isPinned });
        setChatHistory(getAllSessions());
        break;
      case 'delete':
        const confirmDelete = window.confirm(
          `🗑️ Delete Conversation\n\nAre you sure you want to permanently delete this chat?\n\nTitle: "${session.title}"\n\nThis action cannot be undone.`
        );
        if(confirmDelete){
          deleteChatSession(session.id);
          setChatHistory(getAllSessions());
          console.log(`🗑️ Chat "${session.title}" deleted successfully`);
          
          // If deleting the active chat, trigger new chat creation
          if (session.id === activeChatId) {
            onNewChat();
          }
        }
        break;
      case 'rename':
        const newTitle = prompt('✏️ Rename Conversation\n\nEnter a new title for this chat:', session.title);
        if (newTitle && newTitle.trim()) {
          updateChatSession(session.id, { title: newTitle.trim() });
          setChatHistory(getAllSessions());
          console.log(`✏️ Chat renamed to "${newTitle.trim()}"`);
        }
        break;
      case 'share':
        const shareText = `🚀 Check out my AI conversation with Aquilax!\n\nChat: "${session.title}"\nMessages: ${session.messages.length}\nWords: ${session.wordCount || 0}\n\nPowered by Aquilax AI Assistant - Advanced Educational AI for Universities`;
        if (navigator.share) {
          navigator.share({
            title: `Aquilax AI Chat: ${session.title}`,
            text: shareText,
          });
        } else {
          navigator.clipboard.writeText(shareText);
          console.log('📤 Chat sharing link copied to clipboard!');
        }
        break;
      case 'extract':
        extractConversationToFile(session);
        break;
    }
  };

  const handleChatClick = (chatId: string) => {
    console.log(`🔄 User clicked on chat: ${chatId}`);
    onChatSelect(chatId);
  };

  return (
    <div className={`bg-gradient-to-b from-slate-900 via-slate-800 to-slate-900 backdrop-blur-xl shadow-2xl transition-all duration-300 ${
      isCollapsed ? 'w-16' : 'w-80'
    }`}>
      <div className="flex flex-col h-full">
        {/* Header */}
        <div className="p-4 border-b border-purple-500/20">
          <div className="flex items-center justify-between mb-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={onToggleCollapse}
              className="text-purple-300 hover:text-white hover:bg-purple-600/30 rounded-xl shadow-lg transform hover:scale-105 transition-all duration-200"
            >
              <Menu className="h-5 w-5" />
            </Button>
            
            {!isCollapsed && (
              <div className="flex items-center space-x-2">
                <div className="text-xs text-purple-400 font-medium px-2 py-1 bg-purple-600/20 rounded-lg border border-purple-500/30">
                  EDU PRO
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onNewChat}
                  className="text-purple-300 hover:text-white hover:bg-purple-600/30 rounded-xl shadow-lg transform hover:scale-105 transition-all duration-200"
                >
                  <Plus className="h-5 w-5" />
                </Button>
              </div>
            )}
          </div>

          {!isCollapsed && (
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-purple-400" />
              <input
                type="text"
                placeholder="Search conversations..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-3 bg-slate-800/50 backdrop-blur-sm border border-purple-500/30 rounded-xl text-white placeholder-purple-400/60 focus:outline-none focus:border-blue-400/50 focus:ring-2 focus:ring-blue-400/20 transition-all duration-200 shadow-lg"
              />
            </div>
          )}
        </div>

        {/* New Chat Button */}
        {!isCollapsed && (
          <div className="p-4">
            <Button
              onClick={onNewChat}
              className="w-full justify-start bg-gradient-to-r from-purple-600/20 to-blue-600/20 hover:from-purple-600/30 hover:to-blue-600/30 text-white border border-purple-500/30 rounded-xl shadow-lg backdrop-blur-sm transform hover:scale-105 transition-all duration-200"
            >
              <Plus className="h-4 w-4 mr-2" />
              Start new conversation
            </Button>
          </div>
        )}

        {/* Chat History */}
        <div className="flex-1 overflow-y-auto">
          {!isCollapsed && (
            <div className="p-4">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-sm font-medium text-purple-400">Recent Conversations</h3>
                <span className="text-xs text-purple-400/60">{sortedChats.length} chats</span>
              </div>
              <div className="space-y-2">
                {sortedChats.map((chat) => (
                  <div key={chat.id} className="relative group">
                    <button
                      onClick={() => handleChatClick(chat.id)}
                      className={`w-full text-left p-4 rounded-xl transition-all duration-300 transform hover:scale-105 backdrop-blur-sm shadow-lg relative ${
                        activeChatId === chat.id 
                          ? 'bg-gradient-to-r from-purple-600/30 to-blue-600/30 text-white border border-purple-500/30' 
                          : 'text-gray-300 hover:bg-purple-600/20 border border-transparent hover:border-purple-500/20'
                      }`}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            {chat.isPinned && <span className="text-yellow-400">📌</span>}
                            <div className="truncate text-sm font-medium">{chat.title}</div>
                          </div>
                          <div className="flex items-center justify-between text-xs text-purple-400/80 mb-1">
                            <span>{formatTimestamp(chat.updatedAt)}</span>
                            <span className="flex items-center gap-1">
                              💬 {chat.messages.length}
                            </span>
                          </div>
                          <div className="flex items-center gap-2 text-xs text-gray-400/70">
                            <span>{chat.wordCount || 0} words</span>
                            <span>•</span>
                            <span>{chat.aiModel || 'Aquilax'}</span>
                          </div>
                        </div>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="opacity-0 group-hover:opacity-100 transition-opacity p-1 h-auto hover:bg-gray-700/50"
                              onClick={(e) => e.stopPropagation()}
                            >
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent 
                            className="bg-gray-800/95 backdrop-blur-md border-gray-700 z-50 min-w-48"
                            align="end"
                            side="right"
                          >
                            <DropdownMenuItem 
                              onClick={() => handleChatAction('pin', chat)}
                              className="text-gray-300 hover:text-white hover:bg-gray-700/50 cursor-pointer"
                            >
                              {chat.isPinned ? '📌 Unpin Chat' : '📌 Pin Chat'}
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={() => handleChatAction('rename', chat)}
                              className="text-gray-300 hover:text-white hover:bg-gray-700/50 cursor-pointer"
                            >
                              ✏️ Rename Chat
                            </DropdownMenuItem>
                            <DropdownMenuSeparator className="bg-gray-700" />
                            <DropdownMenuItem 
                              onClick={() => handleChatAction('share', chat)}
                              className="text-gray-300 hover:text-white hover:bg-gray-700/50 cursor-pointer"
                            >
                              📤 Share Conversation
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={() => handleChatAction('extract', chat)}
                              className="text-blue-400 hover:text-blue-300 hover:bg-blue-900/30 cursor-pointer"
                            >
                              📄 Extract to File
                            </DropdownMenuItem>
                            <DropdownMenuSeparator className="bg-gray-700" />
                            <DropdownMenuItem 
                              onClick={() => handleChatAction('delete', chat)}
                              className="text-red-400 hover:text-red-300 hover:bg-red-900/30 cursor-pointer"
                            >
                              🗑️ Delete Chat
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </button>
                  </div>
                ))}
                
                {sortedChats.length === 0 && (
                  <div className="text-center py-8 text-gray-400">
                    <div className="text-4xl mb-2">💬</div>
                    <p className="text-sm">No conversations yet</p>
                    <p className="text-xs opacity-60">Start a new conversation to begin</p>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Bottom Navigation - University Features */}
        <div className="p-4 border-t border-purple-500/20">
          <div className="space-y-2">
            <Button
              variant="ghost"
              className={`${isCollapsed ? 'w-8 h-8 p-0' : 'w-full justify-start'} text-purple-300 hover:text-white hover:bg-purple-600/30 rounded-xl transition-all duration-200 transform hover:scale-105`}
            >
              <GraduationCap className="h-4 w-4" />
              {!isCollapsed && <span className="ml-2">Academic Dashboard</span>}
            </Button>
            
            <Button
              variant="ghost"
              className={`${isCollapsed ? 'w-8 h-8 p-0' : 'w-full justify-start'} text-purple-300 hover:text-white hover:bg-purple-600/30 rounded-xl transition-all duration-200 transform hover:scale-105`}
            >
              <Brain className="h-4 w-4" />
              {!isCollapsed && <span className="ml-2">AI Research Assistant</span>}
            </Button>

            <Button
              variant="ghost"
              className={`${isCollapsed ? 'w-8 h-8 p-0' : 'w-full justify-start'} text-purple-300 hover:text-white hover:bg-purple-600/30 rounded-xl transition-all duration-200 transform hover:scale-105`}
            >
              <Users className="h-4 w-4" />
              {!isCollapsed && <span className="ml-2">Collaborative Learning</span>}
            </Button>

            <Button
              variant="ghost"
              className={`${isCollapsed ? 'w-8 h-8 p-0' : 'w-full justify-start'} text-purple-300 hover:text-white hover:bg-purple-600/30 rounded-xl transition-all duration-200 transform hover:scale-105`}
            >
              <TrendingUp className="h-4 w-4" />
              {!isCollapsed && <span className="ml-2">Performance Analytics</span>}
            </Button>

            <Button
              variant="ghost"
              className={`${isCollapsed ? 'w-8 h-8 p-0' : 'w-full justify-start'} text-purple-300 hover:text-white hover:bg-purple-600/30 rounded-xl transition-all duration-200 transform hover:scale-105`}
            >
              <BookOpen className="h-4 w-4" />
              {!isCollapsed && <span className="ml-2">Knowledge Library</span>}
            </Button>

            <Button
              variant="ghost"
              className={`${isCollapsed ? 'w-8 h-8 p-0' : 'w-full justify-start'} text-purple-300 hover:text-white hover:bg-purple-600/30 rounded-xl transition-all duration-200 transform hover:scale-105`}
            >
              <Settings className="h-4 w-4" />
              {!isCollapsed && <span className="ml-2">Institution Settings</span>}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};
